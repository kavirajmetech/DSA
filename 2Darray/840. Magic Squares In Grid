class Solution {
    
    public boolean isMagic(int[][] grid, int r, int c) {
        int[] values = new int[9];
        int k = 0;
        
        for (int i = r; i < r + 3; i++) {
            for (int j = c; j < c + 3; j++) {
                values[k++] = grid[i][j];
            }
        }
        boolean[] seen = new boolean[10];
        for (int v : values) {
            if (v < 1 || v > 9 || seen[v]) return false;
            seen[v] = true;
        }
        
        int sum1 = grid[r][c] + grid[r][c + 1] + grid[r][c + 2];
        int sum2 = grid[r + 1][c] + grid[r + 1][c + 1] + grid[r + 1][c + 2];
        int sum3 = grid[r + 2][c] + grid[r + 2][c + 1] + grid[r + 2][c + 2];
        int sum4 = grid[r][c] + grid[r + 1][c] + grid[r + 2][c];
        int sum5 = grid[r][c + 1] + grid[r + 1][c + 1] + grid[r + 2][c + 1];
        int sum6 = grid[r][c + 2] + grid[r + 1][c + 2] + grid[r + 2][c + 2];
        int sum7 = grid[r][c] + grid[r + 1][c + 1] + grid[r + 2][c + 2];
        int sum8 = grid[r][c + 2] + grid[r + 1][c + 1] + grid[r + 2][c];
        
        return sum1 == sum2 && sum2 == sum3 && sum3 == sum4 &&
               sum4 == sum5 && sum5 == sum6 && sum6 == sum7 &&
               sum7 == sum8;
    }

    public int numMagicSquaresInside(int[][] grid) {
        int r = grid.length;
        int c = grid[0].length;
        int ans = 0;
        
        for (int i = 0; i <= r - 3; i++) {
            for (int j = 0; j <= c - 3; j++) {
                if (isMagic(grid, i, j)) {
                    ans++;
                }
            }
        }
        
        return ans;
    }
}
